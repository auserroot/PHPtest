<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- 函数
        在函数定义阶段
            在内存中开辟一个存储空间
            将函数体内代码当作字符串存入 
                期间不进行代码解析
            将空间地址赋值给函数名
        调用阶段
            按函数名找到对应存储空间
            开辟一个执行空间
                在其内进行形参赋值，代码解析
            将函数名存储空间中的代码复制一份到执行空间
            执行完后将执行空间销毁
    一个不会销毁的执行空间
        在某种特殊情况下，执行空间不会被销毁
            特殊情况：
                当函数内部返回一个“复杂数据类型”
                并且外部有变量接收这个返回值时，执行空间就不会被销毁
        这总执行空间就是 闭包空间

    闭包
        三个条件（缺一不可）
            1 在函数A内直接或间接返回另一个函数B
            2 B函数中使用A函数的私有变量
            3 A函数外部有接收B函数的变量
    闭包空间
        满足闭包条件后，形成的不会销毁的执行空间叫作闭包空间
        A函数中的B函数叫做A函数的闭包函数
        闭包（函数内部的函数）
    -->
    <!-- <script>
        function a(){
            var num = 0;//函数a的私有变量
            return function b(){
                console.log(num)
            }
        }
        var res = a();//res时函数a外部用于接收b函数的变量
        res();//调用b函数（res（）调用的是函数a的私有变量num
    </script> -->
<script>
    // 4. 下列代码会输出什么(要求画图)

    // function fn(i) {
    //     return function (n) {
    //         console.log(n + (--i))
    //     }
    // }

    // var f = fn(2)
    // f(3)//4
    // fn(4)(5)//8
    // fn(6)(7)//12
    // f(8)//8(i未重新赋值继承f(3)中的i此时f(3)中i为0)

    // 5. 下列代码会输出什么(要求画图)

    // function fn(i) {
    //     return function (n) {
    //         console.log(n + (i++))
    //     }
    // }

    // var f = fn(10)
    // f(20)//30
    // fn(20)(40)//60
    // fn(30)(50)//80
    // f(30)//41(i未重新赋值继承f(20)中的i此时f(20)中i为11)


</script>


</body>
</html>